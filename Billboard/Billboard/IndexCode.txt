@model PagedList.IPagedList<Billboard.ViewModels.StructureView>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewBag.Title = "OOH Monitoring";
}

<h2>All OOH Structures</h2>
@using (Html.BeginForm("Index", "Structure", FormMethod.Get))
{     <p>
        Find by Type or Owner: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" />
    </p>
}
<table class="table">
    <tr>
        <th>

            @Html.ActionLink("Type", "Index",
                  new { sortOrder = ViewBag.StructureTypeSortParm, currentFilter = ViewBag.CurrentFilter })

            @*(@Html.DisplayNameFor(model => model.StructureType)*@
        </th>

        <th>
            @Html.ActionLink("Owner Name", "Index",
                                    new { sortOrder = ViewBag.OwnerSortParm, currentFilter = ViewBag.CurrentFilter })


            @*@Html.DisplayNameFor(model => model.StructureOwner.StructureOwnerName)*@
        </th>

        <th>
            Face 
            @*@Html.DisplayNameFor(model => model.StructureFace.StructureFaceID)*@
        </th>
        <th>
            Occupancy 
            @*@Html.DisplayNameFor(model => model.StructureOccupancy.Occupancy)*@
        </th>

        <th>
            Size 
            @*@Html.DisplayNameFor(model => model.StructureSize.StructureSizeID)*@
        </th>
        <th>
            Visibility Type
            @*@Html.DisplayNameFor(model => model.StructureVisibility.VisibilityType)*@
        </th>

        <th>
            Bound Type
            @*@Html.DisplayNameFor(model => model.StructureBound.StructureBoundType)*@
        </th>

        <th>
            Cluster Type
            @*@Html.DisplayNameFor(model => model.StructureClustering.StructureClusterType)*@
        </th>

        <th>
            Condition Status
            @*@Html.DisplayNameFor(model => model.StructureCondition.ConditionStatus)*@
        </th>

        <th>
            Position
            @*@Html.DisplayNameFor(model => model.StructurePosition.Position)*@
        </th>

        @*<th>
                @Html.DisplayNameFor(model => model.StructureLatitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.StructureLongitude)
            </th>*@
        @*<th>
                @Html.DisplayNameFor(model => model.StructureLocation)
            </th>*@

        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.StructureType)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StructureOwnerName)
                @*@Html.DisplayFor(modelItem => item.StructureOwner.StructureOwnerName)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StructureFaceNumber)
                @*@Html.DisplayFor(modelItem => item.StructureFace.StructureFaceNumber)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Occupancy)
                @*@Html.DisplayFor(modelItem => item.StructureOccupancy.Occupancy)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ActualHeight) | @Html.DisplayFor(modelItem => item.ActualWidth)
                @*@Html.DisplayFor(modelItem => item.StructureSize.ActualHeight) | @Html.DisplayFor(modelItem => item.StructureSize.ActualWidth)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.VisibilityType)
                @*@Html.DisplayFor(modelItem => item.StructureVisibility.VisibilityType)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StructureBoundType)
                @*@Html.DisplayFor(modelItem => item.StructureBound.StructureBoundType)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StructureClusterType)
                @*@Html.DisplayFor(modelItem => item.StructureClustering.StructureClusterType)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ConditionStatus)
                @*@Html.DisplayFor(modelItem => item.StructureCondition.ConditionStatus)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Position)
                @*@Html.DisplayFor(modelItem => item.StructurePosition.Position)*@
            </td>
            @*<td>
                    @Html.DisplayFor(modelItem => item.StructureLatitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StructureLongitude)
                </td>*@
            @*<td>
                    @Html.DisplayFor(modelItem => item.StructureLocation)
                </td>*@
        </tr>
    }

</table>
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of
@Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index",
    new
    {
        page,
        sortOrder = ViewBag.CurrentSort,
        currentFilter =
            ViewBag.CurrentFilter
    }))